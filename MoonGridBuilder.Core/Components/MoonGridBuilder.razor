@typeparam T where T : class

@using MoonGridBuilder.Core.DataGrid
@using MoonGridBuilder.Core.Interfaces
@using MudBlazor

@inject IDataGridService<T> DataGridService
@inject IDialogService DialogService

@namespace MoonGridBuilder.Core.Components

<MudDataGrid T="T" @ref="_dataGrid"
             MultiSelection="Options.MultiSelection"
             SortMode="SortMode.Multiple"
             Hideable="true"
             RowsPerPage="Options.DefaultPageSize"
             ServerData="DataGridService.LoadData"
             ShowMenuIcon="Options.ShowMenuIcon"
             ShowColumnOptions="Options.ShowColumnOptions"
             ShowFilterIcons="Options.ShowFilterIcons">

    <ToolBarContent>
        @if (!string.IsNullOrEmpty(Options.Title))
        {
            <MudText Typo="Typo.h6">@Options.Title</MudText>
            <MudSpacer/>
        }
        <MudButton OnClick="OnAdd" Color="Color.Primary">Add</MudButton>
        <MudButton OnClick="@(_ => OnEdit(_dataGrid.SelectedItems.FirstOrDefault()))" Color="Color.Secondary"
                   Disabled="@(_dataGrid.Selection.Count != 1)">Edit
        </MudButton>
        <MudButton OnClick="OnDelete" Color="Color.Error" Disabled="@(_dataGrid.Selection.Count == 0)">Delete
        </MudButton>
        <MudSpacer/>
        @if (Options.SearchEnabled)
        {
            <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Placeholder="Search"
                          Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                          IconSize="Size.Medium" Class="mt-0"></MudTextField>
        }
    </ToolBarContent>

    <Columns>
        @Columns
    </Columns>

    <PagerContent>
        @if (Options.ShowPager)
        {
            <MudDataGridPager T="T" PageSizeOptions="@Options.PageSizeOptions"/>
        }
    </PagerContent>

</MudDataGrid>

@code {

    [Parameter] public required DataGridOptions Options { get; set; }
    [Parameter] public RenderFragment? Columns { get; set; }

    private MudDataGrid<T> _dataGrid = null!;

    protected override void OnInitialized()
    {
        DataGridService.DialogService = DialogService;
    }

    private async Task OnAdd()
    {
        await DataGridService.OnAdd();
        await _dataGrid.ReloadServerData();
    }

    private async Task OnEdit(T? entiety)
    {
        if (entiety == null) return;

        await DataGridService.OnEdit(entiety);
        _dataGrid.SelectedItems.Clear();
        await _dataGrid.ReloadServerData();
    }


    private async Task OnDelete()
    {
        var selectedAssets = _dataGrid.SelectedItems.ToList();
        await DataGridService.OnDelete(selectedAssets);

        await _dataGrid.ReloadServerData();
    }

    private async Task OnSearch(string? searchText)
    {
        if (searchText != null)
        {
            await DataGridService.OnSearch(searchText);
        }

        await _dataGrid.ReloadServerData();
    }

}